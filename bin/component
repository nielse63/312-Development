#!/usr/bin/env node

const yargs = require('yargs');
const path = require('path');
const fs = require('fs');
const ejs = require('ejs');

const TEMPLATE_PATH = path.resolve(__dirname, 'templates/Component.vue');
const TEST_TEMPLATE_PATH = path.resolve(__dirname, 'templates/component.spec.js');

const capitalize = str => str.charAt(0).toUpperCase() + str.slice(1);

const camelcase = str => str
  .replace(/(?:^\w|[A-Z]|\b\w)/g, (letter, index) => (index === 0 ? letter.toLowerCase() : letter.toUpperCase()))
  .replace(/\s+/g, '');

const classify = str => capitalize(camelcase(str.replace(/[-_]/g, ' ')));

const dasherize = str => str.toLowerCase().replace(/[ _]/g, '-');

const options = yargs
  .option('name', {
    alias:    'n',
    describe: 'name of the component',
  })
  .option('folder', {
    alias:    'f',
    default: '',
    describe: 'folder to add the component into (relative to src/components)',
  })
  .demandOption(['name'], 'Please provide a name for the component')
  .help()
  .argv;

// create component object
const componentName = classify(options.name);
const lowerCaseName = dasherize(options.name);
const componentFolder = path.resolve(__dirname, '../src/components', options.folder);
const testFolder = path.resolve(__dirname, '../test/specs', options.folder);
const component = {
  name:      componentName.replace(/\W/g, ''),
  path:      path.join(componentFolder, `${componentName}.vue`),
  testpath:  path.join(testFolder, `${lowerCaseName}.spec.js`),
  lowercase: lowerCaseName,
};

if (!fs.existsSync(component.path)) {
  const dirname = path.dirname(component.path);
  if(!fs.existsSync(dirname)) {
    fs.mkdirSync(dirname);
  }
  ejs.renderFile(TEMPLATE_PATH, { component }).then((data) => {
    fs.writeFileSync(component.path, data, 'utf8');
    console.log(`${path.basename(component.path)} created!`);
  });
}

if (!fs.existsSync(component.testpath)) {
  const dirname = path.dirname(component.testpath);
  if(!fs.existsSync(dirname)) {
    fs.mkdirSync(dirname);
  }
  ejs.renderFile(TEST_TEMPLATE_PATH, { component }).then((data) => {
    fs.writeFileSync(component.testpath, data, 'utf8');
    console.log(`${path.basename(component.testpath)} created!`);
  });
}

